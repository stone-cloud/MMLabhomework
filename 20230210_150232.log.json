{"env_info": "sys.platform: linux\nPython: 3.8.0 (default, Nov  6 2019, 21:49:08) [GCC 7.3.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3090\nCUDA_HOME: None\nGCC: gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-44)\nPyTorch: 1.12.1+cu116\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.6\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.3.2  (built against CUDA 11.5)\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.6, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.13.1+cu116\nOpenCV: 4.7.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.6\nMMDetection: 2.28.1+", "config": "checkpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'checkpoints/mask_rcnn_r50_fpn_mstrain-poly_3x_coco_20210524_201154-21b550bb.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='LoadAnnotations',\n        with_bbox=True,\n        with_mask=True,\n        poly2mask=False),\n    dict(\n        type='Resize',\n        img_scale=[(1333, 640), (1333, 800)],\n        multiscale_mode='range',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='RepeatDataset',\n        times=3,\n        dataset=dict(\n            type='CocoDataset',\n            ann_file='./data/balloon/train/annotation_coco.json',\n            img_prefix='./data/balloon/train/',\n            pipeline=[\n                dict(type='LoadImageFromFile'),\n                dict(\n                    type='LoadAnnotations',\n                    with_bbox=True,\n                    with_mask=True,\n                    poly2mask=False),\n                dict(\n                    type='Resize',\n                    img_scale=[(1333, 640), (1333, 800)],\n                    multiscale_mode='range',\n                    keep_ratio=True),\n                dict(type='RandomFlip', flip_ratio=0.5),\n                dict(\n                    type='Normalize',\n                    mean=[123.675, 116.28, 103.53],\n                    std=[58.395, 57.12, 57.375],\n                    to_rgb=True),\n                dict(type='Pad', size_divisor=32),\n                dict(type='DefaultFormatBundle'),\n                dict(\n                    type='Collect',\n                    keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n            ],\n            classes=('balloon', ))),\n    val=dict(\n        type='CocoDataset',\n        ann_file='./data/balloon/val/annotation_coco.json',\n        img_prefix='./data/balloon/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('balloon', )),\n    test=dict(\n        type='CocoDataset',\n        ann_file='./data/balloon/val/annotation_coco.json',\n        img_prefix='./data/balloon/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('balloon', )))\nevaluation = dict(interval=1, metric=['bbox', 'segm'])\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[9, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\nmodel = dict(\n    type='MaskRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=1,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=1,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            mask_size=28,\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\nclasses = ('balloon', )\nwork_dir = './work_dirs/mask_rcnn_r50_fpn_mstrain-poly_3x_balloon'\nauto_resume = False\ngpu_ids = range(0, 1)\n", "seed": 1772798473, "exp_name": "mask_rcnn_r50_fpn_mstrain-poly_3x_balloon.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "memory": 3498, "data_time": 0.05988, "loss_rpn_cls": 0.03799, "loss_rpn_bbox": 0.01358, "loss_cls": 0.27662, "acc": 86.77734, "loss_bbox": 0.33444, "loss_mask": 0.25062, "loss": 0.91326, "time": 0.4592}
{"mode": "val", "epoch": 1, "iter": 13, "lr": 0.00366, "bbox_mAP": 0.7161, "bbox_mAP_50": 0.8985, "bbox_mAP_75": 0.8509, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.6232, "bbox_mAP_l": 0.779, "bbox_mAP_copypaste": "0.7161 0.8985 0.8509 0.0000 0.6232 0.7790", "segm_mAP": 0.7979, "segm_mAP_50": 0.8787, "segm_mAP_75": 0.8787, "segm_mAP_s": 0.0, "segm_mAP_m": 0.745, "segm_mAP_l": 0.8562, "segm_mAP_copypaste": "0.7979 0.8787 0.8787 0.0000 0.7450 0.8562"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.00565, "memory": 3815, "data_time": 0.04769, "loss_rpn_cls": 0.00504, "loss_rpn_bbox": 0.01301, "loss_cls": 0.06215, "acc": 97.60938, "loss_bbox": 0.10366, "loss_mask": 0.0795, "loss": 0.26336, "time": 0.21561}
{"mode": "val", "epoch": 2, "iter": 13, "lr": 0.00733, "bbox_mAP": 0.6555, "bbox_mAP_50": 0.8926, "bbox_mAP_75": 0.7588, "bbox_mAP_s": 0.2525, "bbox_mAP_m": 0.5856, "bbox_mAP_l": 0.6935, "bbox_mAP_copypaste": "0.6555 0.8926 0.7588 0.2525 0.5856 0.6935", "segm_mAP": 0.7654, "segm_mAP_50": 0.8926, "segm_mAP_75": 0.8509, "segm_mAP_s": 0.1262, "segm_mAP_m": 0.6939, "segm_mAP_l": 0.8123, "segm_mAP_copypaste": "0.7654 0.8926 0.8509 0.1262 0.6939 0.8123"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.00933, "memory": 3815, "data_time": 0.04808, "loss_rpn_cls": 0.01234, "loss_rpn_bbox": 0.01766, "loss_cls": 0.07411, "acc": 97.07617, "loss_bbox": 0.11695, "loss_mask": 0.13073, "loss": 0.35178, "time": 0.21384}
{"mode": "val", "epoch": 3, "iter": 13, "lr": 0.01101, "bbox_mAP": 0.6119, "bbox_mAP_50": 0.8426, "bbox_mAP_75": 0.7672, "bbox_mAP_s": 0.0505, "bbox_mAP_m": 0.6147, "bbox_mAP_l": 0.6575, "bbox_mAP_copypaste": "0.6119 0.8426 0.7672 0.0505 0.6147 0.6575", "segm_mAP": 0.7168, "segm_mAP_50": 0.8268, "segm_mAP_75": 0.7776, "segm_mAP_s": 0.2525, "segm_mAP_m": 0.6043, "segm_mAP_l": 0.774, "segm_mAP_copypaste": "0.7168 0.8268 0.7776 0.2525 0.6043 0.7740"}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.01301, "memory": 3816, "data_time": 0.0487, "loss_rpn_cls": 0.0101, "loss_rpn_bbox": 0.01696, "loss_cls": 0.07542, "acc": 97.12109, "loss_bbox": 0.09665, "loss_mask": 0.08734, "loss": 0.28647, "time": 0.21576}
{"mode": "val", "epoch": 4, "iter": 13, "lr": 0.01469, "bbox_mAP": 0.6543, "bbox_mAP_50": 0.8343, "bbox_mAP_75": 0.7982, "bbox_mAP_s": 0.2525, "bbox_mAP_m": 0.3635, "bbox_mAP_l": 0.7477, "bbox_mAP_copypaste": "0.6543 0.8343 0.7982 0.2525 0.3635 0.7477", "segm_mAP": 0.7517, "segm_mAP_50": 0.8343, "segm_mAP_75": 0.8343, "segm_mAP_s": 0.1767, "segm_mAP_m": 0.4034, "segm_mAP_l": 0.8555, "segm_mAP_copypaste": "0.7517 0.8343 0.8343 0.1767 0.4034 0.8555"}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.01668, "memory": 3816, "data_time": 0.04776, "loss_rpn_cls": 0.00568, "loss_rpn_bbox": 0.01458, "loss_cls": 0.05567, "acc": 97.83398, "loss_bbox": 0.09839, "loss_mask": 0.07161, "loss": 0.24594, "time": 0.2154}
{"mode": "val", "epoch": 5, "iter": 13, "lr": 0.01836, "bbox_mAP": 0.4702, "bbox_mAP_50": 0.6521, "bbox_mAP_75": 0.6197, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.1365, "bbox_mAP_l": 0.5885, "bbox_mAP_copypaste": "0.4702 0.6521 0.6197 0.0000 0.1365 0.5885", "segm_mAP": 0.5516, "segm_mAP_50": 0.6343, "segm_mAP_75": 0.6135, "segm_mAP_s": 0.0, "segm_mAP_m": 0.102, "segm_mAP_l": 0.6963, "segm_mAP_copypaste": "0.5516 0.6343 0.6135 0.0000 0.1020 0.6963"}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.02, "memory": 3816, "data_time": 0.04854, "loss_rpn_cls": 0.01529, "loss_rpn_bbox": 0.02171, "loss_cls": 0.1036, "acc": 96.05273, "loss_bbox": 0.13897, "loss_mask": 0.12163, "loss": 0.4012, "time": 0.21633}
{"mode": "val", "epoch": 6, "iter": 13, "lr": 0.02, "bbox_mAP": 0.2677, "bbox_mAP_50": 0.4104, "bbox_mAP_75": 0.3282, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.1176, "bbox_mAP_l": 0.3263, "bbox_mAP_copypaste": "0.2677 0.4104 0.3282 0.0000 0.1176 0.3263", "segm_mAP": 0.3449, "segm_mAP_50": 0.4104, "segm_mAP_75": 0.4104, "segm_mAP_s": 0.0, "segm_mAP_m": 0.1334, "segm_mAP_l": 0.4297, "segm_mAP_copypaste": "0.3449 0.4104 0.4104 0.0000 0.1334 0.4297"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.02, "memory": 3816, "data_time": 0.04781, "loss_rpn_cls": 0.05731, "loss_rpn_bbox": 0.03115, "loss_cls": 0.15451, "acc": 95.00195, "loss_bbox": 0.15505, "loss_mask": 0.28487, "loss": 0.68289, "time": 0.21255}
{"mode": "val", "epoch": 7, "iter": 13, "lr": 0.02, "bbox_mAP": 0.5438, "bbox_mAP_50": 0.746, "bbox_mAP_75": 0.626, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4462, "bbox_mAP_l": 0.6112, "bbox_mAP_copypaste": "0.5438 0.7460 0.6260 0.0000 0.4462 0.6112", "segm_mAP": 0.6046, "segm_mAP_50": 0.7398, "segm_mAP_75": 0.6855, "segm_mAP_s": 0.0, "segm_mAP_m": 0.4497, "segm_mAP_l": 0.6807, "segm_mAP_copypaste": "0.6046 0.7398 0.6855 0.0000 0.4497 0.6807"}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 0.02, "memory": 3816, "data_time": 0.04826, "loss_rpn_cls": 0.01019, "loss_rpn_bbox": 0.01991, "loss_cls": 0.07265, "acc": 97.14453, "loss_bbox": 0.11807, "loss_mask": 0.10988, "loss": 0.3307, "time": 0.21642}
{"mode": "val", "epoch": 8, "iter": 13, "lr": 0.02, "bbox_mAP": 0.5785, "bbox_mAP_50": 0.7837, "bbox_mAP_75": 0.7133, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.4348, "bbox_mAP_l": 0.6537, "bbox_mAP_copypaste": "0.5785 0.7837 0.7133 0.0000 0.4348 0.6537", "segm_mAP": 0.6585, "segm_mAP_50": 0.7705, "segm_mAP_75": 0.7003, "segm_mAP_s": 0.0, "segm_mAP_m": 0.4693, "segm_mAP_l": 0.7421, "segm_mAP_copypaste": "0.6585 0.7705 0.7003 0.0000 0.4693 0.7421"}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 0.02, "memory": 3816, "data_time": 0.04913, "loss_rpn_cls": 0.00436, "loss_rpn_bbox": 0.0172, "loss_cls": 0.04341, "acc": 98.28125, "loss_bbox": 0.09771, "loss_mask": 0.08391, "loss": 0.24659, "time": 0.21799}
{"mode": "val", "epoch": 9, "iter": 13, "lr": 0.02, "bbox_mAP": 0.6301, "bbox_mAP_50": 0.7997, "bbox_mAP_75": 0.7612, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.5557, "bbox_mAP_l": 0.6868, "bbox_mAP_copypaste": "0.6301 0.7997 0.7612 0.0000 0.5557 0.6868", "segm_mAP": 0.6816, "segm_mAP_50": 0.7751, "segm_mAP_75": 0.7427, "segm_mAP_s": 0.0, "segm_mAP_m": 0.5638, "segm_mAP_l": 0.7496, "segm_mAP_copypaste": "0.6816 0.7751 0.7427 0.0000 0.5638 0.7496"}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 0.002, "memory": 3816, "data_time": 0.04774, "loss_rpn_cls": 0.0022, "loss_rpn_bbox": 0.00968, "loss_cls": 0.03175, "acc": 98.71875, "loss_bbox": 0.06402, "loss_mask": 0.06388, "loss": 0.17152, "time": 0.21459}
{"mode": "val", "epoch": 10, "iter": 13, "lr": 0.002, "bbox_mAP": 0.6432, "bbox_mAP_50": 0.778, "bbox_mAP_75": 0.7417, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.5418, "bbox_mAP_l": 0.7087, "bbox_mAP_copypaste": "0.6432 0.7780 0.7417 0.0000 0.5418 0.7087", "segm_mAP": 0.6792, "segm_mAP_50": 0.778, "segm_mAP_75": 0.737, "segm_mAP_s": 0.0, "segm_mAP_m": 0.5638, "segm_mAP_l": 0.7442, "segm_mAP_copypaste": "0.6792 0.7780 0.7370 0.0000 0.5638 0.7442"}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 0.002, "memory": 3816, "data_time": 0.04725, "loss_rpn_cls": 0.00296, "loss_rpn_bbox": 0.00922, "loss_cls": 0.03052, "acc": 98.80664, "loss_bbox": 0.05976, "loss_mask": 0.06359, "loss": 0.16604, "time": 0.21686}
{"mode": "val", "epoch": 11, "iter": 13, "lr": 0.002, "bbox_mAP": 0.6583, "bbox_mAP_50": 0.776, "bbox_mAP_75": 0.7552, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.519, "bbox_mAP_l": 0.7335, "bbox_mAP_copypaste": "0.6583 0.7760 0.7552 0.0000 0.5190 0.7335", "segm_mAP": 0.6808, "segm_mAP_50": 0.776, "segm_mAP_75": 0.7356, "segm_mAP_s": 0.0, "segm_mAP_m": 0.539, "segm_mAP_l": 0.7555, "segm_mAP_copypaste": "0.6808 0.7760 0.7356 0.0000 0.5390 0.7555"}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.0002, "memory": 3816, "data_time": 0.04772, "loss_rpn_cls": 0.00165, "loss_rpn_bbox": 0.00879, "loss_cls": 0.03024, "acc": 98.75586, "loss_bbox": 0.06056, "loss_mask": 0.0606, "loss": 0.16184, "time": 0.21797}
{"mode": "val", "epoch": 12, "iter": 13, "lr": 0.0002, "bbox_mAP": 0.6635, "bbox_mAP_50": 0.7759, "bbox_mAP_75": 0.7549, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.519, "bbox_mAP_l": 0.7402, "bbox_mAP_copypaste": "0.6635 0.7759 0.7549 0.0000 0.5190 0.7402", "segm_mAP": 0.6803, "segm_mAP_50": 0.7759, "segm_mAP_75": 0.7354, "segm_mAP_s": 0.0, "segm_mAP_m": 0.539, "segm_mAP_l": 0.7553, "segm_mAP_copypaste": "0.6803 0.7759 0.7354 0.0000 0.5390 0.7553"}
